Java 8 features
===================
We have following features in java 8 version.

1) Functional interface

2) Lamda Expression

3) default methods in interface 

4) static methods in interface 

5) Stream API

6) forEach() method 

7) java.time package

and etc.


Interface
==========
Interface is a collection of abstract methods, default methods and static methods.


Marker Interface
=================
Interface which does not have any constans or methods is called marker interface.

Using marker interface we will get some ability to do.

ex:
	Serializable
	Cloneable
	Remote 
	and etc.


Functional interface
=====================
An interface which contains only one abstract method is called functional interface.

It can have any number of default methods and static methods.

ex:
	Runnable       ---> run() 
	Comparable     ---> compareTo()
	ActionListener ---> actionPerformed()

The main objective of functional interface to achieve functional programming.
ex:
	a=f1(){}

	f1(f2(){})
	{} 

@FunctionalInterface annotation is used to declare function interface and it is optional to declare.

syntax:
-----
	@FunctionalInterface
	interface  <interface_name>
	{
		- // 1 abstract method
		- // any default methods
		- // any static methods 
	}

ex:1
-----
@FunctionalInterface
interface A
{
	//abstract method
	public abstract void m1();
}
class B implements A
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args) 
	{
		A a=new B();
		a.m1();
	}
}

ex:2
------
@FunctionalInterface
interface A
{
	//abstract method
	public abstract void m1();
}
class Test 
{
	public static void main(String[] args) 
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1-Method");
			}
		};
		a.m1();
	}
}

2) Lamda Expression
======================
Lamda expression introduced in java 8 version.

We can use lamda expression when we have functional interface.

Lamda expression is used to concise the code.

The main objective of lamda expression is to achieve functional programming.

Lamda expression not consider as a class, it will consider as method.

Lamda expression does not allow name, returntype and modifiers.

ex:
	normal method
	-------------
	public static void m1()
	{
		System.out.println("Hello");
	}

	lamda expression
	---------------
	()->
	{
		System.out.println("Hello");
	};


ex:1
-----
@FunctionalInterface
interface A
{
	//abstract method
	public abstract void m1();
}
class Test 
{
	public static void main(String[] args) 
	{
		A a=()->
		{
			System.out.println("From M1-Method");
		};
		a.m1();
	}
}

ex:2
-----
@FunctionalInterface
interface A
{
	//abstract method
	public abstract void m1(int i,int j);
}
class Test 
{
	public static void main(String[] args) 
	{
		A a=(int i,int j)->
		{
			System.out.println(i+j);
		};
		a.m1(10,20);
	}
}

ex:3
----
@FunctionalInterface
interface A
{
	//abstract method
	public abstract int m1(int i,int j);
}
class Test 
{
	public static void main(String[] args) 
	{
		A a=(int i,int j)->
		{
			return i+j;
		};
		System.out.println(a.m1(10,20));
	}
}

3) default methods in interface 
---------------------------------
To declare default methods in interface we need to use default keyword.

Default methods are introduced in java 8 version.

Default methods are non-abstract methods.

Default methods can be override.

syntax
-----
	interface <interface_name>
	{
		-
		- // default method 
		-
	}

ex:1
-----
interface A
{
	//abstract method
	public abstract void m1();

	//default method
	default void m2()
	{
		System.out.println("From M2 Method");
	}
}
class B implements A
{
	public void m1()
	{
		System.out.println("From M1 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
		a.m2();
	}
}

ex:2
-----
interface A
{
	//abstract method
	public abstract void m1();

	//default method
	default void m2()
	{
		System.out.println("From M2 Method");
	}
}
class B implements A
{
	public void m1()
	{
		System.out.println("From M1 Method");
	}
	public void m2()
	{
		System.out.println("Override M2 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
		a.m2();
	}
}

Using default methods we can achieve multiple inheritence.

ex:3
----
interface Right
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		System.out.println("Middle-M1 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}
o/p:
	middle m1 method

ex:2
-----
interface Right
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Right.super.m1();
	}
}
class Test
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}
o/p:
	right m1 method

ex:3
-----
interface Right
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Left.super.m1();
	}
}
class Test
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}
o/p:
	left m1 method

ex:4
------
interface Right
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Right.super.m1();
		Left.super.m1();
	}
}
class Test
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}


4) static methods in interface 
=================================
To declare static method we need to use static keyword.

It is introduced in java 8 version.

It is a non-abstract method.

It can't be override.

syntax:
----
	interface <interface_name>
	{
		-
		- // static methods
		-
	}

ex:1
----
interface A
{
	static void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A.m1();
	}
}

Stream API
===========
Stream API introduced in java 8 version.

Stream is an interface which is present in java.util.stream package.

It is used to perform bulk operations on Collections.

ex:1
-----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(6,8,1,3,5,7);

		List<Integer> newlist=list.stream().filter(i->i%2==0).collect(Collectors.toList());

		System.out.println(newlist);
	}
}

ex:2
----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,51,39,57,71);

		List<Integer> newList=list.stream().map(i->i+10).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:3
----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,51,39,57,71);

		List<Integer> newList=list.stream().sorted().collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:4
------
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,51,39,57,71);

		long min=list.stream().min((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(min);
	}
}

ex:5
----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,51,39,57,71);

		long max=list.stream().max((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(max);
	}
}

ex:6
----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,51,39,57,71);

		List<Integer> newList=list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:7
----
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,25,51,39,57,71,12);

		long failed=list.stream().filter(i->i<35).count();

		System.out.println(failed);
	}
}


6) forEach() method 
===================
The Java forEach method is a utility method that can be used to iterate over a Java Collection or a Stream.
ex:
---
import java.util.*;
import java.util.stream.*;
class Test
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(86,48,25,51,39,57,71,12);

		list.forEach(System.out::println);
	}
}



















































































































































































































































