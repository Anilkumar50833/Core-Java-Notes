throw statement
================
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.
ex:
	throw new ArithmeticException("don't divide by zero");

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("don't divide by zero");
	}
}

throws statement
=================
If any checked exceptin raised in our program then we must and should handle that exception by using try and catch block or by using throws statement.

ex:
-----
class Test 
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(4000);
			System.out.println("Welcome to Java");
		}
		catch(InterruptedException ie)
		{
			ie.printStackTrace();
		}
	}
}

ex:
----
class Test 
{
	public static void main(String[] args)throws InterruptedException  
	{
			Thread.sleep(6000);
			System.out.println("Welcome to Java");
	}
}

2)Userdefined exceptions
=========================
Exceptions which are created by the user based on the application requirements are called custom exceptions.
ex:
	ACWorkingException
	NoFundException
	NotPracticingException
	and etc.

ex:
	
import java.util.Scanner;

class TooOldException extends RuntimeException 
{
	TooOldException(String s)
	{
		super(s);
	}
}
class TooYoungException extends RuntimeException 
{
	TooYoungException(String s)
	{
		super(s);
	}
}
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the Age :");
		int age=sc.nextInt();

		if(age<18)
			throw new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
			
	}
}


Generics
=========
Arrays are typesafe.It means we can provide guarantte that what type of elements are present in array.

If requirement is there to store string values then we need to declare String[] array.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	sarr[2]=10;  ---> // invalid 

At the time of retrieving the data from array we don't need to perform any typecasting.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	-
	-
	String val1=sarr[0];

Collections are not typesafe.

It means we can't provide guarantee what type of elements are present in collections. 

If requirements is there to store string values then it is never recommanded to go with ArrayList because we won't get any compile time error or runtime error but sometimes our program get failures.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);

At the time of retrieving the data from Collections , compulsary we need to perform typecasting.
ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);
	-
	-
	String val1=(String)al.get(0);	

To overcome this above limitations Sun Micro System introduced
Generics concept in 1.5v.

The main objective of generics are 

1) To make Collections as typesafe.

2) To avoid typecasting problem. 

java.util package
===================

Q)What is the difference between Arrays and Collections ?

Arrays					Collections
---------				-------------
It is a collection of homogeneous 	It is a collection of homogeneous and 
data elements.				hetrogeneous data elements.

It is fixed in size.			It is a growable in nature.

Performance point of view array is 	Memory point of view Collections are 
recommanded to use.			recommanded to use.

Arrays not implemented based on data	Collections are implemented based on 
structure concept.Hence we can't 	data structure concept.Hence we can 
expect any readymade methods.		expect readymade methods.

Arrays can hold primitive types and 	Collections can hold only object types.
object types.


Collection
=============
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection interface.

Collection interface contains following methods which are applicable for entire Collection objects. 
ex:
	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
  	public abstract boolean removeAll(java.util.Collection<?>);
  	public boolean removeIf(java.util.function.Predicate<? super E>);
  	public abstract boolean retainAll(java.util.Collection<?>);
  	public abstract void clear();
  	public abstract boolean equals(java.lang.Object);
  	public abstract int hashCode();
	and etc.

List
======
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where 
duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: java35.1

ArrayList
===========
The underlying data structure is resizable array or growable array.

Insertion order is preserved.

Duplicate objects are allowed.

Hetrogenous objects are allowed.

Null insertion is possible.

It implements List, Serializable, Cloneable and RandomAccess interface.

If our frequent operation is a retrieval operation then ArrayList is a best choice.

ex:1
-----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one, two, three]
		al.add("one");
		System.out.println(al);//[one, two, three, one]
		al.add(10);
		System.out.println(al);//[one, two, three, one, 10]
		al.add(null);
		System.out.println(al);//[one, two, three, one, 10, null]
	}
}

ex:2
---
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one, two, three]
		al.add("one");
		System.out.println(al);//[one, two, three, one]
		al.add(null);
		System.out.println(al);//[one, two, three, one, 10, null]
	}
}

ex:3
-----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		for(int i=0;i<al.size();i++)
		{
				String s=al.get(i);
				System.out.println(s);
		}
	}
}

ex:4
-----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add(new String("one"));
		al.add(new String("two"));
		al.add(new String("three"));
		System.out.println(al);//[one, two, three]
		
	}
}

ex:5
------
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.contains("one")); // true 

		al.remove("one");

		System.out.println(al);//[two, three]

		al.clear();

		System.out.println(al);//[]

	}
}

ex:6
-----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al1=new ArrayList<String>();
		al1.add("one");
		al1.add("two");
		al1.add("three");
		System.out.println(al1); //[one, two, three]

		ArrayList<String> al2=new ArrayList<String>();	
		al2.add("raja");
		System.out.println(al2);//[raja]

		al2.addAll(al1);
		System.out.println(al2);//[raja, one, two, three]

		System.out.println(al2.containsAll(al1)); // true 

		al2.removeAll(al1);
		System.out.println(al2);//[raja]

	}
}

ex:7
------
import java.util.*;
class Test
{
	public static void main(String[] args)
	{	
		List<String> list=new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");
		System.out.println(list);
	}
}



LinkedList 
============
The underlying data structure is doubly LinkedList.

Insertion order is preserved.

Duplicate objects are allowed.

Hetrogenous objects are allowed.

Null insertion is possible.

It implements List, Serializable, Cloneable and Deque interface.

If our frequent operation is a adding and removing in the middle then LinkedList is a best choice.

LinkedList class contains following methods.
ex:
	addFirst()
	addLast()
	getFirst()
	getLast()
	removeFirst()
	removeLast() 
	





































































































































	



















































