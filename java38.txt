Q)Write a java program to find out duplicate occurrence in a given String?

Input:
	I am am Learning java java
Output:
	I=1 , am=2, Learning=1, java=2

ex:

import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		String str="I am am Learning java java";

		String[] sarr=str.split(" ");

		LinkedHashMap<String,Integer> lhm=new LinkedHashMap<String,Integer>();

		//for each loop
		for(String s:sarr)
		{
			if(lhm.get(s)!=null)
			{
				lhm.put(s,lhm.get(s)+1);
			}
			else
			{
				lhm.put(s,1);
			}
		}

		System.out.println(lhm);
	}
}



Multi-Threading
================

Q)What is the difference between Thread and Process?

Thread 
------
It is a light weight sub process.

We can run multiple threads concurently.

One thread can communicate with another thread.
ex:
	class is one thread 
	block is one thread 
	constructor is one thread.

Process
-------
It is a collection of threads.

We can run multiple process concurently.

One process can't communicate with another process.

ex:
	opening a notepad and typing java notes is one process
	Taking a class using zoom meeting is one process
	downloading a file from internet is one process.



Q)What is multitasking?

Executing several task simultenously such concept is called multi-tasking.

We have two types of multitasking.

1)Process based multitasking
----------------------------
Executing several task simultenously where each task is a independent process.

It is best suitable for OS level.


2)Thread based multitasking 
-----------------------------
Executing several task simultenously where each task is a same part of a program.

It is best suitable for programmatic level.


Q)What is multithreading?

Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by JAVA API.

The main important application area of multithreading are.

1) To implements multimedia graphics.

2) To develop animations.

3) To develop video games.

In how many ways we can create a thread in java
================================================
There are two ways to create a thread in java.

1) By extends a Thread class

2) By implementing a Runnable interface 


1) By extends a Thread class
----------------------------
class MyThread extends Thread 
{
	//work of a thread 
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread schedular
--------------------------
If multiple threads are waiting for execution then which thread get executed will decided by thread schedular.

Which algorithm , mechanism or behaviour used by thread schedular is completely depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.


case2: t.start() and t.run()
--------------------------------
If we call t.start() method , a new thread will be created which is resposible to execute run() method automatically.

ex:
class MyThread extends Thread 
{
	//work of a thread 
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we call t.run() method , no new thread will be created but run() method will execute just like a normal method.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//no new thread
		t.run();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 3: If we won't override run() method
------------------------------------------
If we won't override run() method then Thread class run() method will execute 
automatically which is empty implementation.

ex:

class MyThread extends Thread 
{
	
}
class Test
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread will create 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 4: If we overload run() method
------------------------------------
If we overload run() method then t.start() method always execute run() method with 
zero parameters only.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread will create 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case5: Life Cycle of a thread
-------------------------------
Once if we create a thread , our thread will be in New/Born state.

If we call t.start() method then our thread goes to Ready/Runnable state.

If thread schedular allocates CPU then our thread enters to Running state.

Once the run() method execution is completed then our thread goes to Dead state.


Diagram: java38.1


2) By implementing a Runnable interface 
----------------------------------------
class MyRunnable implements Runnable
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		MyRunnable r=new MyRunnable();

		Thread t=new Thread(r); // r is a targatable interface

		//new thread will create
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

Setting and getting name of a thread
=====================================
In java, every thread has a name explicitly provided by the programmer or automatically generated by JVM.

We have following methods to set and get name of a thread.
ex:
	public final void setName(String name);
	public final String getName();

ex:
----
class MyThread extends Thread 
{

}
class Test
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());//main 

		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0

		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName());//Parent-Thread 

		t.setName("Child-Thread");
		System.out.println(t.getName());//Child-Thread
	}
}

Thread priority
==================
In java ,every thread has a priority explicitly provided by the programmer or automatically generated by JVM.

The valid range of thread priority is 1 to 10. Where 1 is a least priority and 10 is a highest priority.

If we  take more then 10 priority then we will get runtime exception called IllegalArgumentException.

Thread class defines following constants as a thread priorities.
ex:
	MAX_PRIORITY   -- 10
	MIN_PRIORITY   -- 1 
	NORM_PRIORITY  -- 5

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY.

Thread schedular uses thread priority while allocating to CPU.

A thread which is having highest priority will be executed first.

If multiple threads having same priority then we can't expect any execution order.

We have following methods to set and get thread priority.
ex:
	public final void setPriority(int priority)
	public final int getPriority()

ex:

class MyThread extends Thread 
{

}
class Test
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());//5

		MyThread t=new MyThread();
		System.out.println(t.getPriority());//5

		Thread.currentThread().setPriority(10);
		System.out.println(Thread.currentThread().getPriority());//10

		t.setPriority(4);
		System.out.println(t.getPriority());//4

		t.setPriority(11);// R.E IllegalArgumentException
	}
}

Various ways to prevent a thread from execution
================================================
There are three ways to prevent(stop) a thread from execution.

1) yield()

2) join()

3) sleep() 

1) yield()
--------------
It will pause current execution thread and gives the chance to other threads having same priority.

If there is no waiting thread or low priority thread then same thread will continue it's execution.

The thread which is yielded when it will get a chance for execution is depends upon mercy of thread schedular.

ex:
	public static native void yield()

Diagram: java38.2

ex:
----
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
			Thread.currentThread().yield();
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

2) join()
----------
If a thread wants to wait untill the completion of some other thread then we need to use join method.

A join() method will throw one runtime exception called InterruptedException so we must and should handle that exception by using try and catch block or by using throws statement.

ex:
	public final void join()throws InterruptedException
	public final void join(long ms)throws InterruptedException
	public final void join(long ms,int ns)throws InterruptedException


Diagram: java38.3

ex:
----
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t=new MyThread();
		t.start();
		t.join();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

3) sleep() 
-----------
If a thread don't want to perform any operation on perticular amount of time then we need to use sleep().

A sleep() method will throw one runtime exception called InterruptedException so we must and should handle that exception by using try and catch block or by using throws statement.

ex:
	public static native void sleep()throws InterruptedException
	public static native void sleep(long ms)throws InterruptedException
	public static native void sleep(long ms,int ns)throws InterruptedException


Diagram: java38.4

ex:
---
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
			try
			{
				Thread.sleep(2000);
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}































































 












































