Object class
============
Object class present in java.lang package.

It is a parent class for every java class.

Object class contains following methods.
ex:
	getClass()
	hashCode()
	toString()
	native()
	wait()
	notify()
	notifyAll()
	and etc.

Data Hiding
=============
Our data should not go out directly.

It means outside person must not access our data directly.

Using private modifier we can achieve data hiding concept.

The main objective of data hiding is to provide security.
ex:
	class  Account
	{
		private double balance;
		-
		-
	}


Abstraction
==============
Hiding internal implementation and highlighting the set of services is called abstraction.

Using abstract classes and interfaces we can implement abstraction.

The best example of abstract is GUI (Graphical User Interface) ATM machine where bank people will hide internal implementation and highlights the setup of services like banking, withdrawl , mini statement and etc.

The main advantages of abstraction are.

1) It gives security because it will hide internal implementation.

2) Enhancement becomes more easy without effecting enduser they can perform any
   changes in our internal system.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.


Encapsulation
================
The process of encapsulating or grouping variables and it's associate methods in a single entity.

A class is said to be encapsulated class if it supports data hiding + abstraction.

In encapsulation for every variable we need to declare setter and getter method.

Diagram: java27.1

The main advantages of encapsulation are.

1) It gives security.

2) Enhancement becomes more easy.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.

The main disadvantage of encapsulation is , it will increase length of our code and 
slow down the execution process.

ex:
-----

approach1
---------
class Student
{
	private int studId;
	private String studName;
	private double studFee;

	//setter methods
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}
	public void setStudFee(double studFee)
	{
		this.studFee=studFee;
	}

	//getter methods
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
	public double getStudFee()
	{
		return studFee;
	}

	public static void main(String[] args)
	{
		Student s=new Student();
		s.setStudId(101);
		s.setStudName("Alan");
		s.setStudFee(1000d);

		System.out.println("Student Id :"+s.getStudId());
		System.out.println("Student Name :"+s.getStudName());
		System.out.println("Student Fee :"+s.getStudFee());
	}
}

approach2
---------
class Student
{
	private int studId;
	private String studName;
	private double studFee;

	//setter methods
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}
	public void setStudFee(double studFee)
	{
		this.studFee=studFee;
	}

	//getter methods
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
	public double getStudFee()
	{
		return studFee;
	}
}
class Test
{
	public static void main(String[] args)
	{
		Student s=new Student();
		s.setStudId(101);
		s.setStudName("Alan");
		s.setStudFee(1000d);

		System.out.println("Student Id :"+s.getStudId());
		System.out.println("Student Name :"+s.getStudName());
		System.out.println("Student Fee :"+s.getStudFee());
	}
}

Q)What is the difference between POJO class and Java Bean class?

POJO class
----------
A class is said to be a pojo class if it supports following two properties.

1) All variables must be private. 

2) All variables must have setter and getter method.


Java Bean class
--------------
A class is said to be a java bean class if it supports following four properties.

1) A class should be public.

2) A class should have atleast zero argument constructor. 

3) All variables must be private. 

4) All variables must have setter and getter methods.

Note:
----
Every Java bean class is a pojo class. But every pojo class is not a java bean class.



Is-A relationship
===================
Is-A relationship is also known as inheritance.

Using "extends" keyword we can implements Is-A relationship.

The main objective is is-a relationship is to provide reusability.

ex:
----
class Parent 
{
	public void m1()
	{
		System.out.println("Parent-M1 Method");
	}
}
class Child extends Parent 
{
	public void m2()
	{
		System.out.println("Child-M2 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.m1();

		Child c=new Child();
		c.m1();
		c.m2();

		Parent p1=new Child();
		p1.m1();

		//Child c1=new Parent(); // invalid 


	}
}

conclusion
----------
Whatever our parent contains properties will go to child But whatever our child contains property will not go to parent.

A parent reference can hold child object but child reference can't hold parent object.


Inheritance
==============
Inheritance is a mechanism where we can acquire the properties from one class to another class.

or

Inheritance is a mechanism where we will derive a class in the presence of existence classes.

We have following types of inheritance in java.

1) Single Level inheritance 

2) Multi Level inheritance

3) Multiple inheritance 

4) Hierachical inheritance 

5) Hybrid inheritance 

1) Single Level inheritance 
----------------------------
If we derive a class in the present of one base class is called single level inheritance.
ex:
	class  A			A (parent,super,base)
	{				|
	}				|
	class B extends A 		|
	{				|
	}				B (child,sub,derive)

ex:
-----
class A
{
	public void m1()
	{
		System.out.println("A-M1 Method");
	}
}
class B extends A
{
	public void m2()
	{
		System.out.println("B-M2 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();
	}
}

2) multi Level inheritance 
----------------------------
If a class is derived from one base class and that class is derived from another base class is called multi level inheritance.
ex:
	class  A			A 
	{				|
	}				|
	class B extends A 		B
	{				|
	}				|
	class C extends B		C
	{
	}

ex:
----
class A
{
	public void m1()
	{
		System.out.println("A-M1 Method");
	}
}
class B extends A
{
	public void m2()
	{
		System.out.println("B-M2 Method");
	}
}
class C extends B
{
	public void m3()
	{
		System.out.println("C-M3 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();

		C c=new C();
		c.m1();
		c.m2();
		c.m3();
	}
}

3)Multiple inheritance
----------------------
In java , a class can't extends more then one class simultenosuly because java does not support multiple inheritance.

ex:
	class A {}
	class B {}
	class C extends A,B   X -- invalid 
	{
	}

An interface can extends more then one interface so we can achieve multiple inheritance concept through interfaces.
ex:
	interface A {}
	interface B {} 
	interface C extends A,B 
	{
	}

If our class does not extends any other class then our class is a direct child class of Object class.
ex:
	class A			Object
	{			|
				|
	}			A

If our class extends some other class then our class is a indirect child class of Object class.
ex:					Object
	class A				|
	{				|
	}				|
	class B extends A		A
	{				|
					|
	}				B

Java does not support cyclic inheritance.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}


Q)Why java does not support multiple inheritance?

There is a chance of raising ambiguity problem that's why java does not support multiple inheritance.
ex:

	p1.m1()				p2.m1()
	|__________________________________|
			|
			|
			C.m1()


4) Hierachical inheritance
----------------------------
If we derive multiple classes in the presence of one base class is called hierachical inheritance.
ex:
			A
			|
	|-------------------------------|
	B				C

ex:

class A
{
	public void m1()
	{
		System.out.println("A-M1 Method");
	}
}
class B extends A
{
	public void m2()
	{
		System.out.println("B-M2 Method");
	}
}
class C extends A
{
	public void m3()
	{
		System.out.println("C-M3 Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();

		C c=new C();
		c.m1();
		c.m3();
	}
}

5)Hybrid inheritance
--------------------
It is a combination of more then one inheritance.

Java does not support hybrid inheritance.

ex:
			A
			|
	|-------------------------------|
	B				C
	|-------------------------------|
			|
			D


















































































































































































	