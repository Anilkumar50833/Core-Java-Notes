ArrayList
===========
ex:1
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(10,20,30,40);

		System.out.println(list);


		for(int i=0;i<list.size();i++)
		{
			Integer val=list.get(i);
			System.out.print(val+" ");
		}
	}
}

ex:2
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add(10);
		al.add(20);
		al.add(30);
		al.add(40);

		System.out.println(al);//[10, 20, 30, 40]

		al.add(2,100);

		System.out.println(al);//[10, 20, 100, 30, 40]
	}
}


LinkedList
=============

ex:1
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one, two, three ]

		ll.add("one");
		System.out.println(ll);//[one, two, three, one]

		ll.add(10);
		System.out.println(ll);//[one, two, three, one, 10]

		ll.add(null);
		System.out.println(ll);//[one, two, three, one, 10, null]
	}
}

ex:2
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one, two, three ]

		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo, one, two, three, jojo]

		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo

		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one, two, three]

	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one, two, three ]

		ll.add(1,"gogo");
		System.out.println(ll);
	}
}

Vector
============
The underlying datastructure is resiable array or growable array.

Insertion order is preserved.

Duplicates objects are allowed.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements List, Serializable, Cloneable and RandomAccess interface.

Note:
-----
All the methods present in Vector are called synchronized methods.Hence we can achieve thread safety.

Vector class contains following methods.
ex:
	addElement()
	removeElementAt()
	removeAllElements()
	firstElement()
	lastElement()
	elements()
	and etc.

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		System.out.println(v.capacity());

		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}

		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.firstElement());
		System.out.println(v.lastElement());

		v.removeElementAt(4);
		System.out.println(v);//[1,2,3,4,6,7,8,9,10]

		v.removeAllElements();
		System.out.println(v); // []
	}
}

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		System.out.println(v.capacity());

		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.get(0));//1 
		System.out.println(v.get(v.size()-1)); //10

		v.remove(4);
		System.out.println(v);//[1,2,3,4,6,7,8,9,10]

		v.clear();
		System.out.println(v);//[]
		
	}
}

Q)Differences between ArrayList and Vector?

ArrayList				Vector
-----------				-------------
It is a non-legacy class.		It is a lagacy class.

No methods are synchronized.		Methods are sychronized.

Multiple threads are allowed to 	At a time only one thread is allowed	
execute at a time.Hence we can't	to execute.Hence we can achieve thread
achieve thread safety.			safety.

There is no waiting time of a thread	Waiting time of a thread will increase 
effectively performance is high.	effectively performance is low.

It is introduced in 1.2v.		It is introduced in 1.0v.


Stack
=========
It is a child class of Vector class.

If we depend upon Last In First Out order(LIFO) then we need to use Stack.

constructor
--------
	Stack s=new Stack();

methods
------

1) push()
---------
	It is used to add the element to stack.

2) pop()
--------
	It is used to remove the element from stack.

3) peek()
---------
	It is used to read toppest element from stack.

4) isEmpty()
----------
	It is used to check stack is empty or not.

5) search() 
-----------
	It will return offset value if element is found otherwise it 
	will return -1.

ex:
--------
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Stack<String> s=new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);//[A,B,C]

		s.pop();
		System.out.println(s); //[A,B]

		System.out.println(s.peek());//B

		System.out.println(s.isEmpty());//false 

		System.out.println(s.search("Z"));//-1

		System.out.println(s.search("A"));//2
		
	}
}


Set
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where 
duplicates are not allowed and order is not preserved then we need to use Set interface.

Diagram: java36.1

HashSet
--------
The underlying datastructure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take based on the hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashSet hs=new HashSet();
		hs.add("one");
		hs.add("five");
		hs.add("ten");
		System.out.println(hs); //[one,ten,five]
		hs.add("one");
		System.out.println(hs); //[one,ten,five]
		hs.add(10);
		System.out.println(hs);//[one, 10, ten, five]
		hs.add(null);
		System.out.println(hs);//[null, one, 10, ten, five]

	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashSet<String> hs=new HashSet<String>();
		hs.add("one");
		hs.add("five");
		hs.add("ten");
		System.out.println(hs); //[one,ten,five]
		hs.add("one");
		System.out.println(hs); //[one,ten,five]
		hs.add(null);
		System.out.println(hs);//[null, one, ten, five]

	}
}

LinkedHashSet
==================
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet					LinkedHashSet
----------				---------------
The underlying datastructure is 	The underlying datastructure is 
Hashtable.				Hashtable and LinkedList.

Order is not preserved.			Order is preserved.

It is introduced in 1.2v.		It is introduced in 1.4v.

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedHashSet<String> lhs=new LinkedHashSet<String>();
		lhs.add("one");
		lhs.add("five");
		lhs.add("ten");
		System.out.println(lhs); //[one,five,ten]
		lhs.add("one");
		System.out.println(lhs); //[one,five,ten]
		lhs.add(null);
		System.out.println(lhs);//[one,five,ten,null]

	}
}

TreeSet
=========
The underlying datastructure is Balanced Tree.

Insertion order is not preserved bcz it will take sorting order of an object.

Duplicate objects are not allowed.

Hetregenous objects are not allowed. If we trying to insert hetrogenous objects then we will get ClassCastException.

For empty TreeSet if we are trying to insert null then we will get NullPointerException.

After inserting the elements if we are trying to insert null then we will get NullPointerException.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(4);
		ts.add(7);
		System.out.println(ts);//[1,4,7,10]
		ts.add(10);
		System.out.println(ts);//[1,4,7,10]
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(4);
		ts.add(7);
		System.out.println(ts);//[1,4,7,10]
		ts.add("hi");
		System.out.println(ts);//ClassCastException
	}
}

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(4);
		ts.add(7);
		System.out.println(ts);//[1,4,7,10]
		ts.add(null);
		System.out.println(ts);//NullPointerException
	}
}


Q)What is the difference between Comparable and Comparator interface?

Comparable
------------
Comparable is an interface which is present in java.lang package.

Comparable interface contains only one method called compareTo() method.

If we depend upon default natural sorting order then we need to use Comparable.

ex:
	obj1.compareTo(obj2)

	It will return -ve if object1 comes before object2.
	It will return +ve if object1 comes after object2.
	It will return 0 if both objects are same.

ex:
----

class Test 
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z")); // -25

		System.out.println("Z".compareTo("A")); //  25

		System.out.println("k".compareTo("k")); // 0
	}
}


Comparator
-----------
Comparator is an interface which is present in java.util package.

Comparator interface contains two methods i.e compare() and equals() method.

If we depend upon customized sorting order then we need to use Comparator.

ex:
	public int compare(obj1,obj2);


		It will return +ve if object1 comes before object2.
		It will return -ve if object1 comes after object2.
		It will return 0 if both objects are same.
	

Implementation of equals() method is optional because it is available to a program
through inheritance.

ex:
----

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(7);
		ts.add(1);
		ts.add(10);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[10,7,5,3,1]
	}
}

class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return 1;
		if(i1>i2)
			return -1;
		else
			return 0;
	}
}

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(7);
		ts.add(1);
		ts.add(10);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[1, 3, 5, 7, 10]
	}
}

class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return -1;
		if(i1>i2)
			return 1;
		else
			return 0;
	}
}





































































































































































































































