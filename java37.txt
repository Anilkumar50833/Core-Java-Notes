Map
======
It is not a child interface of Collection interface.

If we want to represent group of individual objects in a key-value pair then we need to use Map interface.

Here key and value can be objects.

Key cannot be duplicated but value can be duplicated.

Each key,value pair is called single entry/one entry.

Diagram: java37.1


HashMap
--------
The underlying data structure is Hashtable.

Insertion order is not preserved because it will hash code of an object.

Key can't be duplicated but value can be duplicated.

Hetrogenous objects are allowed for both key and value.

Null insertion is possible only once and for values any number of time.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();

		hm.put("one","raja");
		hm.put("two","alan");
		hm.put("nine","lisa");
		hm.put("eight","jose");
		System.out.println(hm);//{nine=lisa, one=raja, two=alan, eight=jose}

		hm.put("one","gogo");
		System.out.println(hm);//{nine=lisa, one=gogo, two=alan, eight=jose}

		hm.put(null,"brook");
		System.out.println(hm);//{null=brook, nine=lisa, one=gogo, two=alan, eight=jose}
	}
}

ex:
-----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();

		hm.put("one","raja");
		hm.put("two","alan");
		hm.put("nine","lisa");
		hm.put("eight","jose");
		
		Set s=hm.keySet();
		System.out.println(s);//[nine, one, two, eight]

		Collection c=hm.values();
		System.out.println(c);//[lisa, raja, alan, jose]

		Set s1=hm.entrySet();
		System.out.println(s1);//[nine=lisa, one=raja, two=alan, eight=jose]

	}
}

LinkedHashMap
-----------------
LinkedHashMap is a child class of HashMap class.

LinkedHashMap is exactly same as HashMap class with following differences.

HashMap					LinkedHashMap 
----------				------------
The underlying data structure is 	The underlying data structure is Hashtable
Hashtable.				and LinkedList.

Insertion order is not preserved.	Insertion order is preserved.

It is introduced in 1.2v.		It is introduced in 1.4v.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedHashMap<String,String> lhm=new LinkedHashMap<String,String>();

		lhm.put("one","raja");
		lhm.put("two","alan");
		lhm.put("nine","lisa");
		lhm.put("eight","jose");
		lhm.put(null,"brook");
		System.out.println(lhm);//{one=raja, two=alan, nine=lisa, eight=jose, null=brook}

	}
}

TreeMap
----------
The underlying data structure is RED BLACK TREE.

Insertion order is not preserved because it will display in the sorting order of a key.

Duplicate keys are not allowed but values can be duplicated.

If we depend upon default natural sorting order then key can be homogeneous or comparable.

If we depend upon customized sorting order then key can be hetrogeneous or non-comparable.

Key can't be null but value can be null.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1,"one");
		tm.put(9,"nine");
		tm.put(5,"five");
		tm.put(6,"six");
		tm.put(3,"three");
		System.out.println(tm);//{1=one, 3=three, 5=five, 6=six, 9=nine}

		tm.put(3,"gogo");
		System.out.println(tm);//{1=one, 3=gogo, 5=five, 6=six, 9=nine}

		tm.put(7,null);
		System.out.println(tm);//{1=one, 3=gogo, 5=five, 6=six, 7=null, 9=nine}

		tm.put(null,"ten");
		System.out.println(tm); // R.E NullPointerException
	}
}

Hashtable
==========
The underlying data structure is Hashtable.

Insertion order is not preserved because it takes descending order.

Key can't be duplicate but value can be duplicated.

Key and value can't be null otherwise we will get NullPointerException.

Hetrogenous objects are allowed for both key and value.

ex:
--
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> tm=new Hashtable<Integer,String>();
		tm.put(1,"one");
		tm.put(9,"nine");
		tm.put(5,"five");
		tm.put(6,"six");
		tm.put(3,"three");
		System.out.println(tm);//{9=nine,6=six,5=five,3=three,1=one}

		tm.put(3,"gogo");
		System.out.println(tm);//{9=nine,6=six,5=five,3=gogo,1=one}

		//tm.put(7,null);
		//System.out.println(tm);//R.E NullPointerException 

		tm.put(null,"ten");
		System.out.println(tm); // R.E NullPointerException
	}
}

Types of cursors in java
==========================
Cursor is used to read objects one by one from Collections.

We have three types of cursors in java.

1) Enumeration 

2) Iterator

3) ListIterator 

1) Enumeration 
-------------
It is used to read objects one by one from legacy collection objects.

We can create Enumeration object by using elements() method.

ex:
	Enumeration e=v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean hasMoreElements()
	public Object nextElement()

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
				Integer i=(Integer)e.nextElement();
				System.out.println(i);
		}

	}
}

Limitations with Enumeration
----------------------------
Using Enumeration interface we can read objects only from legacy collection objects.Hence it is not a universal cursor.

Using Enumeration we can perform read operation but not remove operation.

To overcome this limitation Sun Micro system introduced in Iterator interface.

2)Iterator
---------------
It is used to read objects one by one from any collection objects.Hence it is a universal cursor.

Using Iterator interface we can perform read and remove operations.

We can create Iterator object by using iterator() method.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.
ex:
	public boolean hasNext()
	public Object next()
	public void remove()

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1,2,3,4,5,6,7,8,9,10]

		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
				itr.remove();
		}
		System.out.println(al);//[1,3,5,7,9]
	}
}

Limitations with Iterator 
-----------------------------
Using Iterator and Enumeration interface we can read objects only in forwared direction but not in backward direction.Hence it is not a bi-directional cursor.

Using Iterator interface we can perform read and remove  but not adding and replacement of new objects.

To overcome this limitation sun micro system introduced ListIterator interface.

3)ListIterator
---------------
It is a child interface of Iterator interface.

It is used to read objects one by one only from List collection objects.

It is a bi-directional cursor.

Using ListIterator interface we can perform read , remove , adding and replacement of new objects.

We can create ListIterator object by using listIterator() method.
ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following 9 methods.

ex:
	public boolean hasNext()
	public Object next()
	public void remove()
	public boolean hasPrevious()
	public Object previous()
	public void set(Object o)
	public void add(Object o)
	public int nextIndex()
	public int previousIndex()

ex:
------
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		System.out.println(al);//[bala,venki,chiru,nag]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}

	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		System.out.println(al);//[bala,venki,chiru,nag]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("venki"))
			{
				litr.remove();
			}
		}

		System.out.println(al);//[bala,chiru,nag]

	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		System.out.println(al);//[bala,venki,chiru,nag]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("venki"))
			{
				litr.add("rana");
			}
		}

		System.out.println(al);//[bala,venki,rana,chiru,nag]

	}
}
ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		System.out.println(al);//[bala,venki,chiru,nag]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("venki"))
			{
				litr.set("rana");
			}
		}

		System.out.println(al);//[bala,rana,chiru,nag]

	}
}





Interview Programs
====================
Q)Write a java program to display distinct element from given array?

input:
	2 6 8 1 3 5 2 9 9 1

output:
	2 6 8 1 3 5 9

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		int[] arr={2,6,8,1,3,5,2,9,9,1};

		LinkedHashSet<Integer> lhs=new LinkedHashSet<Integer>();

		//reading the data from array
		for(int i:arr)
		{
			lhs.add(i);
		}

		Iterator<Integer> itr=lhs.iterator();
		while(itr.hasNext())
		{
			Integer i=itr.next();
			System.out.print(i+" ");
		}

	}
}

Types of Datat structures in java
===================================
Diagram: java37.2





























	
	



























































































































































