Identifiers
=============
A name in java is called identifier.

It can be variable name, class name , method name and label name.

ex:
	class  Test
	{
		public static void main(String[] args)
		{
			
			int i=10;

			System.out.println(i);

		}
	}
	Here Test, main, args and i are identifiers in java.

Rules to declare an identifier
------------------------------
Rule1:
-----
	Identifier will accept following characters.
	ex:
		A-Z
		a-z
		0-9
		_
		$

Rule2:
-----
	If we take other character then we will get compile time error.
	ex:
		_ = 10;
		$ = 20;
		* = 30; //invalid 
		emp_no; 
		emp#no; //invalid 

Rule3:
------
	Identifier must and should starts with alphabets , dollar or underscore 
	but not with digits.
	ex:
		int  a1234;  
		int  _1234;
		int 1abcd; //invalid 

Rule4:
-------
	Every identifier is a case sensitive.
	ex:
		int  number;
		int NUMBER;
		int NumBer; 

Rule5:
--------
	We can't take reserved words as an identifier.
	ex:
		int if; //invalid 
		int else; //invalid 
		int  do; //invalid 

Rule6:
------
	There is no length limit for an identifier but it is not recommanded to 
	take more then 15 characters.

Rule7:
------
	We can take predefined classes and interfaces as identifier name.
	But it is not good programming practice.
	ex:
		int  String; 
		int Runnable; 

Reserved Words
=================
There are some identifiers which are reserved to associate some functionality or meaning such type of identifiers are called reserved words.

Java supports 53 reserved words and all reserved words we need to write under lower case letters only.

Diagram: java8.1

Used keywords with respect to class
---------------------------------
class
interface
package
enum
import
extends
implements 

Used keywords with respect to object
---------------------------
new 
instanceof
this
super 

Used keywords with respect to datatypes
-----------------------------------
byte
short
int
long
float
double
boolean
char 

Used keywords with respect to modifiers
-----------------------------------
default
public
private 
protected
static
final
abstract
strictfp
synchronized
transient
volatile
native 

Used keywords with respect to return type
---------------------------------------
void 

Used keywords with respect to flow control
------------------------------------
if
else
switch
do
while
break
continue
for
case

Used keywords with respect to exception handling
---------------------------------
try
catch
throw
throws 
assert
finally

 


Fully Qualified Name
=====================
Fully qualified name means we need to declare a class or interface along with
package name.

ex:
class Test
{
	public static void main(String[] args)
	{
		java.util.Date d=new java.util.Date();
		System.out.println(d);
	}
}








































































































































































