Q)Write a java program to display below output?

input:
	A1B2C3D4

output:
	ABBCCCDDDD
i
ex:
----
class Test 
{
	public static void main(String[] args) 
	{
		String str="A1B2C3D4";

		for(int i=0;i<str.length();i++)
		{
			if(Character.isAlphabetic(str.charAt(i)))
			{
				System.out.print(str.charAt(i));
			}
			else
			{
				int a=Character.getNumericValue(str.charAt(i));
				
				for(int j=1;j<a;j++)
				{
					System.out.print(str.charAt(i-1));
				}
			}
		}
	}
}

Assignment
===========
Q)Write a java program to display below output?

input:
	ABBCCCDDDD

output:
	A1B2C3D4


StringBuffer
===============
If our content change frequently then it is never recommanded to go with String object because for every change a new object will be created such behaviour is called immutability of an object.

To ovecome this limitation sun micro system introduced StringBuffer concept.

In StringBuffer all the required changes will be done in a same object.

constructor
-------------

1)StringBuffer sb=new StringBuffer();
---------------------------------------
It will create empty StringBuffer object with default initial capacity of 16.

If capacity reaches to maximum capacity then new capacity will be created with below formulea.
ex:
	new capacity = current_capacity+1*2;

ex:

class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		
		System.out.println(sb.capacity());//16

		sb.append("abcdefghijlmnopq");

		System.out.println(sb.capacity());//16

		sb.append("rs");

		System.out.println(sb.capacity());//16+1*2 = 34
	}
}

2)StringBuffer sb=new StringBuffer(capacity);
---------------------------------------------
It will create StringBuffer object with specified initial capacity.

ex:
-
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer(19);
		
		System.out.println(sb.capacity());//19

	
	}
}


3)StringBuffer sb=new StringBuffer(String str);
---------------------------------------------
It will create StringBuffer object equivalent to String.

Here capacity will be created with below formulea.

ex:
	capacity = s.length()+16;

ex:
------
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("bhaskar");
		
		System.out.println(sb.capacity());//7+16 = 23
	}
}

Q)Write a java program to display reverse of a string?

input:
	hello 

output:
	olleh 

ex:

class Test 
{
	public static void main(String[] args) 
	{
		String str="hello";

		StringBuffer sb=new StringBuffer(str);

		System.out.println(sb.reverse());
	}
}

Q)Write a java program to check given string is palindrome or not?

ex:

class Test 
{
	public static void main(String[] args) 
	{
		String str="madam";

		StringBuffer sb=new StringBuffer(str);

		String rev=sb.reverse().toString();

		if(str.equals(rev))
			System.out.println("It is a palindrome string");
		else
			System.out.println("It is not a palindrome string");
	}
}

StringBuilder
================
StringBuilder is exactly same as StringBuffer with following differences.

StringBuffer				StringBuilder
---------------				--------------
All the methods present in StringBuffer	No method present in StringBuilder is 
are synchronized.			synchronized.

At a time only one thread is allowed to Multiple threads are allowed to execute
execute StringBuffer object.Hence we 	StringBuilder object.Hence we can't achieve
can achieve thread safety.		thread safety.

Waiting time of a thread will increases There is no waiting time effectively 
effectively performance is low.		performance is high.

It is introduced in 1.0v.		It is introduction in 1.5v.


StringTokenizer 
=================
StringTokenizer is a class which is present in java.util package.

It is used to tokenize the string irrespective of regular expression.

StringTokenizer class contains following methods.
ex:
	public boolean hasMoreTokens()
	public String nextToken()
	public boolean hasMoreElements()
	public Object nextElement()
	public int countTokens()

We can create StringTokenizer object as follow.
ex:
	StringTokenizer st=new StringTokenizer(str,regex);

ex:
----
import java.util.StringTokenizer;
class Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("This is java class");

		System.out.println(st.countTokens());

	}
}

Note : Default regular expression is space 


ex:
----
import java.util.StringTokenizer;
class Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("This is java class"," ");

		System.out.println(st.countTokens());

	}
}

ex:
---
import java.util.StringTokenizer;
class Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("This is java class"," ");

		while(st.hasMoreTokens())				
		{
			String str=st.nextToken();
			System.out.println(str);
		}

	}
}

ex:
----
import java.util.StringTokenizer;
class Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("This is java class"," ");

		while(st.hasMoreElements())
		{
			String str=(String)st.nextElement();
			System.out.println(str);
		}

	}
}

ex:
----
import java.util.StringTokenizer;
class Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("9,99,999",",");

		while(st.hasMoreElements())
		{
			String str=(String)st.nextElement();
			System.out.println(str);
		}

	}
}

Note:
------
If our content not change frequently then it is recommanded to use String.

If our content change fequently where thread safety is required then we need to use StringBuffer.

If our content change fequently where thread safety is not required then we need to use StringBuilder.

java.io package
=====================

File
=======
	File f=new File("abc.txt");

File will check is there any abc.txt file already created or not.
If it is available it simply refers to that file.If it is not created then
it won't create any new file.

ex:
---
import java.io.*;
class Test 
{
	public static void main(String[] args) 
	{
		File f=new File("abc.txt");
		System.out.println(f.exists());//false
	}
}


A File object can be used to create a physical file.

ex:
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("abc.txt");
		System.out.println(f.exists());//false

		f.createNewFile();
		System.out.println(f.exists());//true

	}
}

A File object can be used to create a directory also.

ex:
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("bhaskar123");
		System.out.println(f.exists());//false

		f.mkdir();
		System.out.println(f.exists());//true 

	}
}


Q)Write a java program to Create a  "cricket123" folder and inside that folder create "abc.txt" file?

import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f1=new File("cricket123");
		f1.mkdir();

		File f2=new File("cricket123","abc.txt");
		f2.createNewFile();

		System.out.println("Please check the location");

	}
}



FileWriter
==========
FileWriter is used to write character oriented data into a file.

constructor
--------------
FileWriter fw=new FileWriter(String s);
FileWriter fw=new FileWriter(File f);

ex:
	FileWriter fw=new FileWriter("aaa.txt");
	or

	File f=new File("aaa.txt");
	FileWriter fw=new FileWriter(f);

If file does not exist then FileWriter will create a physical file.


Methods
-----------

1)write(int ch)
-----------------
	It will insert single character into a file.

2)write(char[] ch)
-----------------
	It will insert array of characters into a file.

3)write(String s)
-------------------
	It will insert String into a file.

4)flush()
----------
	It gives guaranttee that last character of a file is also inserted.

5)close()
-----------
	It is used to close the FileWriter object.


ex:
-----
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		FileWriter fw=new FileWriter("aaa.txt");

		fw.write(98);// b 
		fw.write("\n");

		char[] ch={'a','b','c'};
		fw.write(ch);
		fw.write("\n");

		fw.write("bhaskar\nsolution");
		fw.flush();
		fw.close();
		System.out.println("Please check the location");
	}
}


FileReader
==================
It is used to read character oriented data from a file.

constructor
--------------
FileReader fr=new FileReader(String s);
FileReader fr=new FileReader(File f);

ex:
	FileReader fr=new FileReader("aaa.txt");
	or
	File f=new File("aaa.txt");
	FileReader fr=new FileReader(f);

Methods
----------
1)read()
--------
	It will read next character from a file and return unicode value.
	If next character is not available then it will return -1.

2)read(char[] ch)
----------------
	It will read collection of characters from a file.

3)close() 
---------
	It is used to close FileReader object.

ex:1
-------
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		FileReader fr=new FileReader("aaa.txt");

		int i=fr.read();
		while(i!=-1)
		{
			System.out.print((char)i);
			i=fr.read();
		}
		fr.close();
	}
}


ex:2
----------
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		FileReader fr=new FileReader("aaa.txt");
	
		char[] carr=new char[255];

		//load the data from file to char array
		fr.read(carr);

		//reading the data from char array
		for(char c:carr)
		{
			System.out.print(c);
		}

		fr.close();
		
	}
}

Usage of FileWriter and FileReader is not recommanded to use
==============================================================
While inserting the data by using FileWriter ,we need to insert line 
seperator(\n) which is very headache for the programmer.

While reading the data by using FileReader object ,we need to read character
by character which is not convenient to the programmer.

To overcome this limitation Sun micro system introduced BufferedWriter and BufferedReader.


BufferedWriter
=================
It is used to insert character oriented data into a file.

constructor
-----------
BufferedWriter bw=new BufferedWriter(Writer w);
BufferedWriter bw=new BufferedWriter(Writer w,int buffersize);

BufferedWriter object does not communicate with files directly.
It will take the support of some writer objects.

ex:
	FileWriter fw=new FileWriter("bbb.txt");
	BufferedWriter bw=new BufferedWriter(fw);

	or

	BufferedWriter bw=new BufferedWriter(new FileWriter("bbb.txt"));	
	

Methods
---------
1)write(int ch)
-----------------
	It will insert single character into a file.

2)write(char[] ch)
-----------------
	It will insert array of characters into a file.

3)write(String s)
-------------------
	It will insert String into a file.

4)flush()
----------
	It gives guaranttee that last character of a file is also inserted.

5)close()
-----------
	It is used to close the BufferedWriter object.

6)newLine()
----------
	It will insert new line into a file.

ex:

import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		
	BufferedWriter bw=new BufferedWriter(new FileWriter("bbb.txt"));
		bw.write(98);//b
		bw.newLine();

		char[] ch={'a','b','c'};
		bw.write(ch);
		bw.newLine();

		bw.write("bhaskar");
		bw.newLine();

		bw.flush();
		bw.close();
		System.out.println("Please check the location");	
	}
}

BufferedReader
=================
It is enhanced reader to read character oriented data from a file.

constructor
------------
BufferedReader br=new BufferedReader(Reader r);
BufferedReader br=new BufferedReader(Reader r,int buffersize);

BufferedReader object can't communicate with files directly.IT will take
support of some reader objects.

ex:
	FileReader fr=new FileReader("bbb.txt");
	BufferedReader br=new BufferedReader(fr);

	or

	BufferedReader br=new BufferedReader(new FileReader("bbb.txt"));
	
The main advantage of BufferedReader over FileReader is we can read 
character line by line instead of character by character.


methods
---------
1)read()
--------
	It will read next character from a file and return unicode value.
	If next character is not available then it will return -1.

2)read(char[] ch)
----------------
	It will read collection of characters from a file.

3)close() 
---------
	It is used to close BufferedReader object.

4)nextLine()
------------
	It is used to read next line from the file.If next line is 
	not available then it will return null.

ex:

import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		BufferedReader br=new BufferedReader(new FileReader("bbb.txt"));
		
		String line=br.readLine();
		while(line!=null)
		{
			System.out.println(line);
			line=br.readLine();
		}

		br.close();

	}
}


PrintWriter
===============
It is enhanced write to write character oriented data into a file.

constructor
-----------
PrintWriter pw=new PrintWriter(String s);
PrintWriter pw=new PrintWriter(File f);
PrintWriter pw=new PrintWriter(Writer w);

PrintWriter can communicate with files directly and it will take the support of some writer objects.

ex:
	PrintWriter pw=new PrintWriter("ccc.txt");

	or 

	PrintWriter pw=new PrintWriter(new File("ccc.txt"));

	or

	PrintWriter pw=new PrintWriter(new FileWriter("ccc.txt"));


The main advantage of PrintWriter over FileWriter and BufferedWriter is we can insert any type of data.

Assume if we want insert primitive values then PrintWriter is best choice.


methods
------------
write(int ch)
write(char[] ch)
write(String s)
flush()
close()

writeln(int i)
writeln(float f)
writeln(double d)
writeln(String s)
writeln(char c)
writeln(boolean b)



write(int i)
write(float f)
write(double d)
write(String s)
write(char c)
write(boolean b)

ex:
------

import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		PrintWriter pw=new PrintWriter("ccc.txt");

		pw.write(100);// d
		pw.println(100);// 100
		pw.print('a');
		pw.println(true);
		pw.println("hi");
		pw.println(10.5d);

		pw.flush();
		pw.close();
		System.out.println("Please check the location");
	}
}










	






































































































































